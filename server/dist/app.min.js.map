{"version":3,"sources":["app.js"],"names":["Koa","require","path","router","cors","koaStatic","fs","getData","deleteAllTable","bodyParser","getBlogByPage","_isSSL","https","allowHeaders","updateBlog","app","use","origin","exposeHeaders","maxAge","credentials","allowMethods","routes","allowedMethods","join","ctx","regeneratorRuntime","async","_context","prev","next","url","type","response","body","createReadStream","stop","readFileSync","__dirname","cert","createServer","options","callback","listen","console","log"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,OACdC,KAAOD,QAAQ,QADfD,UAAcC,QAApB,cAGME,OAASF,QAAQ,oBAFjBC,WAAeD,QAArB,kBAIMG,KAAOH,QAAQ,aAHfI,MAASJ,QAAGA,SAKZK,GAAKL,QAAQ,MAJbE,OAASF,QAAQ,cAARA,iBAMoBA,QAAQ,iBAAnCM,iBAAAA,QAAQC,wBAAAA,yBALhBP,QAAA,kCAAMQ,qBAAAA,WAAaR,mBAAAA,SAAQS,wBAAAA,cAOrBC,QAAS,EALTC,IAAQX,IAAAA,IAsBZY,GAbFL,iBARAM,aAYAC,IAAIC,IAAIZ,KAAK,CACXa,OAAQ,WAXFV,MAYG,KAGTW,cAd+CjB,CAAAA,mBAAQ,wBAevDkB,OAfML,EAgBNM,aAAa,EACbC,aAjB4BX,CAiBb,MAAO,OAjBMA,UAkB5BG,aAAc,CAAC,eAAgB,gBAAiB,aAblDL,IAAAA,IAAAA,cAkBAO,IAAIC,IAAIb,OAAOmB,UAAUN,IAAIb,OAAOoB,kBAblCN,IAAAA,IAAMZ,UAAEH,KAAAsB,KAAUC,UAAK,aAErBV,IAAAC,IAAA,SAAAS,GAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAHS,WAAAL,EAAAM,MAKXb,EAAAA,SAAec,KAAC,OAChBb,EAAMc,SANKC,KAAA5B,GAAA6B,iBAAA,sBAGT,KAAA,EAAA,IAAA,MAAA,OAAAP,EAAAQ,YAMFvB,OAAAA,CAGFE,IAAIC,IAAIP,UAIRM,IAAQV,QAAUH,CAEdc,IAAIV,GAAA+B,aAAQZ,KAARD,KAAAc,UAAA,mBAAAC,KAAAjC,GAAA+B,aAAAnC,KAAAsB,KAAAc,UAAA,oBAAA1B,MAAA4B,aAAAC,QAAA1B,IAAA2B,YAAAC,OAAA,IAAA,WACNC,QAAAC,IAAA,iDAGC9B,IAAA4B,OAAA,GAAA,WAiBCC,QAAQC,IAAR","file":"app.min.js","sourcesContent":["const Koa = require('koa')\nconst path = require('path')\nconst koaStatic = require('koa-static')\nconst router = require('./routers/router')\nconst bodyParser = require('koa-bodyparser')\nconst cors = require('koa2-cors')\nconst https = require('https')\nconst fs = require('fs')\nconst sslify = require('koa-sslify').default\nconst { getData,deleteAllTable } = require('./services/db')\nconst { updateBlog, getBlogs, getBlogByPage, } = require('./controllers/articles-handler')\nconst _isSSL = false;\n\n\nconst app = new Koa()\ndeleteAllTable()\nupdateBlog()\n\n// 允许跨域的\napp.use(cors({\n  origin: function (ctx) {\n    return \"*\" // 允许来自所有域名请求\n    // return \"http://localhost:8090\" // 这样就能只允许 http://localhost:8080 这个域名的请求了\n  },\n  exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],\n  maxAge: 5,\n  credentials: true, // 当设置成允许请求携带cookie时，需要保证\"Access-Control-Allow-Origin\"是服务器有的域名，而不能是\"*\";\n  allowMethods: ['GET', 'POST', 'DELETE'],\n  allowHeaders: ['Content-Type', 'Authorization', 'Accept'],\n}))\n\napp.use(bodyParser())\n\napp.use(router.routes()).use(router.allowedMethods())\n\napp.use(koaStatic(path.join(__dirname, '../dist')))\n\napp.use(async ( ctx ) => {\n  if ( ctx.url !== '/index' ) {\n    ctx.response.type = 'html';\n    ctx.response.body = fs.createReadStream('./dist/index.html');\n  }\n})\n\nif (_isSSL) {\n  // 强制转化 http 请求为 https\n  app.use(sslify());\n\n  const options = {\n    key: fs.readFileSync(path.join(__dirname, '../ssl/ssl.key')),\n    cert: fs.readFileSync(path.join(__dirname, '../ssl/ssl.crt'))\n  }\n\n  https.createServer(options, app.callback()).listen(443, () => {\n    console.log(`Server is running at 443 port with SSL`)\n  })\n} else {\n  app.listen(80, () => {\n    console.log(`Server is running at 80 port`)\n  })\n}\n\n"]}