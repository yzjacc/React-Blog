{"version":3,"sources":["app.js"],"names":["Koa","require","path","koaStatic","router","bodyParser","cors","https","fs","sslify","getData","deleteAllTable","updateBlog","getBlogs","getBlogByPage","_isSSL","app","use","origin","ctx","exposeHeaders","maxAge","credentials","allowMethods","allowHeaders","routes","allowedMethods","join","__dirname","url","response","type","body","createReadStream","options","key","readFileSync","cert","createServer","callback","listen","console","log"],"mappings":"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","sourcesContent":["const Koa = require('koa')\nconst path = require('path')\nconst koaStatic = require('koa-static')\nconst router = require('./routers/router')\nconst bodyParser = require('koa-bodyparser')\nconst cors = require('koa2-cors')\nconst https = require('https')\nconst fs = require('fs')\nconst sslify = require('koa-sslify').default\nconst { getData,deleteAllTable } = require('./services/db')\nconst { updateBlog, getBlogs, getBlogByPage, } = require('./controllers/articles-handler')\nconst _isSSL = false;\n\n\nconst app = new Koa()\ndeleteAllTable()\nupdateBlog()\n\n// 允许跨域的\napp.use(cors({\n  origin: function (ctx) {\n    return \"*\" // 允许来自所有域名请求\n    // return \"http://localhost:8090\" // 这样就能只允许 http://localhost:8080 这个域名的请求了\n  },\n  exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],\n  maxAge: 5,\n  credentials: true, // 当设置成允许请求携带cookie时，需要保证\"Access-Control-Allow-Origin\"是服务器有的域名，而不能是\"*\";\n  allowMethods: ['GET', 'POST', 'DELETE'],\n  allowHeaders: ['Content-Type', 'Authorization', 'Accept'],\n}))\n\napp.use(bodyParser())\n\napp.use(router.routes()).use(router.allowedMethods())\n\napp.use(koaStatic(path.join(__dirname, '../dist')))\n\napp.use(async ( ctx ) => {\n  if ( ctx.url !== '/index' ) {\n    ctx.response.type = 'html';\n    ctx.response.body = fs.createReadStream(path.join(__dirname, '../dist/index.html'));\n  }\n})\n\nif (_isSSL) {\n  // 强制转化 http 请求为 https\n  app.use(sslify());\n\n  const options = {\n    key: fs.readFileSync(path.join(__dirname, '../ssl/ssl.key')),\n    cert: fs.readFileSync(path.join(__dirname, '../ssl/ssl.crt'))\n  }\n\n  https.createServer(options, app.callback()).listen(443, () => {\n    console.log(`Server is running at 443 port with SSL`)\n  })\n} else {\n  app.listen(80, () => {\n    console.log(`Server is running at 80 port`)\n  })\n}\n\n"],"file":"app.dev.js"}